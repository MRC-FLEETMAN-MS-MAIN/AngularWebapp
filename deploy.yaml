#  Provisions and deploys a microservice

- hosts: localhost
  gather_facts: yes
  vars: 
     region: us-east-1
     keypair_name: microservice
     instance_type: t2.nano
     image_name: ami-0c94855ba95c71c99 

     security_group: microservice-angular-group
  
  tasks:

    - name: Setup variables needed later
      set_fact: 
         region: "{{ region }}"

    - name: Setup security group - port 22 can be removed in future
      ec2_group:
        name: "{{ security_group }}"
        description: Security rules for Microservice
        region: "{{ region }}"
        rules_egress:
           - proto: tcp
             from_port: 0
             to_port: 65535
             cidr_ip: 0.0.0.0/0
        rules:
           - proto: tcp
             from_port: 8080
             to_port: 8080
             cidr_ip: 0.0.0.0/0
           
           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

    - name: Provision an instance
      ec2:
        key_name: "{{ keypair_name }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_name }}"
        wait: true
        region: "{{region}}"
        exact_count: 1 
        count_tag:
          Deploy: Blue
          Name: Angular_Tracker
        instance_tags:
          Name: Angular_Tracker
          Deploy: Blue
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: "{{ec2.instances}}"

    - name: Wait for SSH Server to start responding
      wait_for:
              port: 22
              host: "{{item.public_ip}}"
              state: started
      with_items: "{{ec2.instances}}"
      
      
    - name: Setup variables needed later
      add_host: 
         hostname: varhost
         local_ip: "{{ item.public_ip }}"
      with_items: "{{ec2.instances}}"


- hosts: ec2hosts
  tasks:
  - name: upgrade all packages
    yum: name=* state=latest
    become: true
  


  - name: Send the docker file across to the new instance
    copy: 
       src: dockerfile
       dest: /home/ec2-user/angular/target/
       mode: 0700
       
       
       
  - name: Send the docker-compose file across to the new instance
    copy: 
       src: docker-compose.yml
       dest: /home/ec2-user/angular/target/
       mode: 0700

  - name: Send the deployment across to the new instance
    copy: 
       src: dist/micro1
       dest: /home/ec2-user/angular/target/micro1
       mode: 0700

  - name: Remove exisiting docker files
    yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed
    become: yes


  - name: Install Docker
    yum:
        name:
          - docker
    become: yes
    


  - name: "Starting and Enabling Docker service"
    service:
        name: docker
        state: started
        enabled: yes
    become: yes

  - name: Add user ec2-user to docker group
    user:
         name: ec2-user
         groups: docker
         append: yes
    become: yes
    
  - name: Installing docker compose
    become: true
    shell: curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    
  - name: Set binary exec for  docker compose
    become: true
    shell: chmod +x /usr/local/bin/docker-compose
    
    
 # - name: Build the Docker image and container
 #   docker_compose:
 #      project_src: angular/target/
 #   become: yes

#  - name: Build the Docker image and container
#    command: docker-compose -f "docker-compose.yml" up
#    args:
#          chdir: angular/target/

#    become: yes

  - name: Build the Docker image and container
    shell: docker-compose up
    args:
      chdir: angular/target/

  

#  - name: Run the Docker container
#    command: docker run -d -e "eureka.instance.hostname={{ hostvars['varhost']['local_ip'] }}" --restart always --publish 8012:8012 --name bb vehtra:1.0
#    become: yes


    




- hosts: localhost
  tasks:
  - name: Gather facts about the new blue server
    ec2_instance_info:
       filters:
          "tag:Deploy": Blue
          "tag:Name": Angular_Tracker
          instance-state-name: running
       region: "{{ region }}"
    register: new_server

  - name: Get the id of the old, soon to be dead, green server
    ec2_instance_info:
       filters:
          "tag:Deploy": Green
          "tag:Name": Angular_Tracker
          instance-state-name: running
       region: "{{ region }}"
    register: old_green

  - name: Terminate the existing Green Server.
    ec2:
      exact_count: 0
      count_tag:
        Name: Angular_Tracker
        Deploy: Green
      region: "{{ region }}"
      image: notneeded

  - name: All done, set new server to Green status
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instances[0].instance_id }}"
       tags:
          Deploy: Green
       state: present

  - name: Remove Blue Tag
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instances[0].instance_id }}"
       tags:
          Deploy: Blue
       state: absent
